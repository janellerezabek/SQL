# In this project, I downloaded Spotify data from Kaggle: https://www.kaggle.com/datasets/equinxx/spotify-top-50-songs-in-2021?select=spotify_top50_2021.csv
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name,
track_name,
avg(popularity) AS avg_popularity,
avg(danceability) AS avg_danceability,
avg(energy) AS avg_energy
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

#Then I determined who the Top 10 artists are by popularity.
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

#Next I determined what the average tempo is for songs with different levels of danceability (e.g., low, medium, high).
SELECT
  CASE
    WHEN danceability < 0.4 THEN 'Low'
    WHEN danceability >= 0.4 AND danceability < 0.7 THEN 'Medium'
    ELSE 'High'
  END AS danceability_level,
AVG(tempo) AS avg_tempo
FROM BIT_DB.Spotifydata
GROUP BY danceability_level;

#Then I determined the average duration of songs for each artist in the dataset.
SELECT artist_name, avg(duration_ms) AS avg_duration 
FROM BIT_DB.Spotifydata
GROUP BY artist_name;

#Then I determined which artist has the highest average energy in their songs.
SELECT artist_name, avg(energy) as avg_energy
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_energy DESC
LIMIT 1;

#Then I determined the average danceability by each artist.
SELECT artist_name, avg(danceability) AS avg_danceability 
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_danceability DESC;

#Lastly, I determined the top 10 artists with the highest instrumentalness on average.
SELECT artist_name, avg(instrumentalness) AS avg_instrumentalness
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY instrumentalness DESC
LIMIT 10;
